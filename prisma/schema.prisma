// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  post          Post[]

  teamsId String[] @db.ObjectId
  teams Team[] @relation(fields: [teamsId], references: [id])
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  owner String
  description String
  code String @unique

  membersId String[] @db.ObjectId
  members User[] @relation(fields: [membersId], references: [id])

  posts Post[]
}

model Post {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id], onDelete : Cascade)
  tag String
  postContent String  
  datePosted DateTime

  teamId String @db.ObjectId
  team Team @relation(fields: [teamId], references: [id], onDelete : Cascade)
}